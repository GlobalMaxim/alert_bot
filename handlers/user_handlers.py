from datetime import datetime
from aiogram.types import ParseMode
from mailing.mailing import Mailing
from telebot import dp, bot
from aiogram.types import Message
from config import admin_id
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from keyboards.default.menu import menu, menu_2
from keyboards.mailing.regionsMarkup import regions_markup
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from telegram_redis.redisPreparation import Redis_Preparation

from utils.misc.throttling import rate_limit


@dp.message_handler(CommandStart())
async def register_user(message: Message):
    r = Redis_Preparation()
    r.create_new_user_to_redis(message)
    chat_id = message.from_user.id
    name = message.from_user.first_name
    mail = Mailing()
    is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
    if is_user_uses_alert == True:
        markup = menu_2
    else:
        markup = menu
    await bot.send_message(chat_id=chat_id, text=f'–ü—Ä–∏–≤—ñ—Ç, {name}', reply_markup=markup)

@dp.message_handler(Text(equals=["/restart"]))
async def register_user(message: Message):
    mail = Mailing()
    is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
    if is_user_uses_alert == True:
        markup = menu_2
    else:
        markup = menu
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'–ü—Ä–∏–≤—ñ—Ç, {name}', reply_markup=markup)

@dp.message_handler(Text(equals=["üó∫–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"]))
@rate_limit(limit=10)
async def run(message: Message):
    mail = Mailing()
    is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
    if is_user_uses_alert == True:
        markup = menu_2
    else:
        markup = menu
    if message.from_user.id != admin_id:
        notify_admin=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @{message.from_user.username}, {message.from_user.first_name} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º"
        await bot.send_message(admin_id, text=notify_admin, disable_notification=True)
    
    r = Redis_Preparation()
    res = r.get_regions_from_redis()
    current_date = str(datetime.now().strftime('%H:%M %d-%m-%Y'))
    if len(res['regions']) > 0:
        await message.answer('–¢—Ä–∏–≤–æ–≥–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:')
        for i in res['regions']:
            await message.answer(f"üõë <b>{i['name']}</b>\n–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏ —É {i['changed']}\n@ukraine_alarm_bot", parse_mode=ParseMode.HTML)
        
        await message.answer_photo(photo=open('screenshot.png', 'rb'), caption=f"<b>‚ùóÔ∏è–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {current_date}</b>\n@ukraine_alarm_bot", reply_markup=markup)
    else:
        await message.answer('–¢—Ä–∏–≤–æ–≥ –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î!')
    r.create_user_updates_to_redis(message)

@dp.message_handler(commands=['set'])
@dp.message_handler(Text(equals=["üì¢–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É"]))
async def send_mail(message: Message):
    await message.answer(text='üìç–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ, –¥–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:', reply_markup=regions_markup)

@dp.callback_query_handler()
async def save_user_region(call: CallbackQuery):
    mail = Mailing()
    if call.data == 'cancel':
        await call.message.edit_reply_markup()
        await call.message.delete()
        await bot.send_message(chat_id=call.from_user.id, text= f'‚ùóÔ∏è–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ —Ä–µ–≥—ñ–æ–Ω')
        
        mail.stop_mailing(call)
    else:
        await call.message.edit_reply_markup()
        await mail.save_user_mailing(call)
        await bot.send_message(chat_id=call.from_user.id, text= f'‚úÖ–í—ñ—Ç–∞—é, –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ–π —Ç—Ä–∏–≤–æ–∑—ñ —É <b>"{call.data}"</b>', parse_mode=ParseMode.HTML, reply_markup=menu_2)
        await mail.check_is_active_user_region(bot,call)
    await call.answer()

@dp.message_handler(Text(equals=["‚ùå–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É"]))
async def send_mail(message: Message):
    mail = Mailing()
    await message.answer(text='‚ùóÔ∏è–í–∏ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏', reply_markup=menu)
    mail.stop_mailing(message)
    

@dp.message_handler(CommandHelp())
async def bot_help(message: Message):
    text = [
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ',
        '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥',
        '/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        '/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'
    ]
    await message.answer('\n'.join(text))

@dp.message_handler(Text('–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!üá∫üá¶'))
async def register_user(message: Message):
    await message.answer('–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!üá∫üá¶')

@dp.message_handler()
async def register_user(message: Message):
    mail = Mailing()
    is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
    if is_user_uses_alert == True:
        markup = menu_2
    else:
        markup = menu
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'{name}, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', reply_markup=markup)


