from aiogram.types import ParseMode
from telebot import dp, bot
from aiogram.types import Message
from config import admin_id
from aiogram.types import Message, BotCommand, BotCommandScopeChatAdministrators
from aiogram.dispatcher.filters import Command, Text
from keyboards.default.menu import menu
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from telegram_redis.redisPreparation import Redis_Preparation
from db.database import Database
from test_windows import  parse_photo, api_parse_info
from utils.misc.throttling import rate_limit

@dp.message_handler(CommandStart())
async def register_user(message: Message):
    r = Redis_Preparation()
    r.create_new_user_to_redis(message)
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'–ü—Ä–∏–≤—ñ—Ç, {name}', reply_markup=menu)

@dp.message_handler(Text(equals=["/restart"]))
async def register_user(message: Message):
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'–ü—Ä–∏–≤—ñ—Ç, {name}', reply_markup=menu)

@dp.message_handler(Text(equals=["–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"]))
@rate_limit(limit=10)
async def run(message: Message):
    
    if str(message.from_user.id) != admin_id:
        notify_admin=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @{message.from_user.username}, {message.from_user.first_name} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º"
        await bot.send_message(admin_id, text=notify_admin, disable_notification=True)
    await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ...')
    r = Redis_Preparation()
    api_data = api_parse_info()
    res = r.get_regions_from_redis(api_data)
    await message.answer('–¢—Ä–∏–≤–æ–≥–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:')
    for key,value in res['regions'].items():
        await message.answer(f"<b>{key}</b>\n–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏ —É {value}", parse_mode=ParseMode.HTML)
    await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —Ñ–æ—Ç–æ...')
    if res['is_updated'] == True:
        parse_photo()
    await message.answer_photo(photo=open('screenshot.png', 'rb'), reply_markup=menu)
    r.create_user_updates_to_redis(message)
    # exec_redis.set_temp_data_to_redis(message)
    # add_new_user(message)

@dp.message_handler(CommandHelp())
async def bot_help(message: Message):
    text = [
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ',
        '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥',
        '/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        '/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'
    ]
    await message.answer('\n'.join(text))

@dp.message_handler(Text('–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!üá∫üá¶'))
async def register_user(message: Message):
    await message.answer('–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!üá∫üá¶')

@dp.message_handler()
async def register_user(message: Message):
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'{name}, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', reply_markup=menu)


